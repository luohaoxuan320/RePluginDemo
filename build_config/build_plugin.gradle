
//给插件用的，扩展了编译维度buildType ，方便插件单体单独编译
apply from: '../build_config/flavor_enviroment.gradle'
android {

    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "buildType","environment"
    productFlavors {
        //编译类型的维度

        //作为单体运行
        devSelf {
            dimension  "buildType"
        }

        //作为插件编译
        plugin{
            dimension  "buildType"
        }
    }
    sourceSets {
        //作为单体运行
        devSelf {
            java.srcDir("../build_config/devSelf/java")
        }

        //作为插件编译
        plugin{
            java.srcDir("../build_config/plugin/java")
        }
    }
}


//这个要定义在这个gradle里面，才能apply('replugin-plugin-gradle')，
// 如果把这个单独定义在插件的gradle里面，就会提示找不到'replugin-plugin-gradle'

class AutoSetReplugin implements Plugin<Project> {
    void apply(Project project) {
        println "==AutoSetReplugin=="
        project.gradle.startParameter.taskRequests.each { TaskExecutionRequest taskq ->
            println '==startParameter=taskRequest=' + taskq
            if (taskq.args.toString().contains('assembleDevSelf')) {
                //在DevSelf下就不apply replugin。这样调整主要是方便宿主直接打包插件时能apply replugin
            }else if(taskq.args.toString().contains('assemble')){//防止 sync gradle的时候replugin插件运行
                //作为插件编译的时候，才apply replugin，这样可以避免单体调试的时候replugin，Unzip Jar和Repackage依赖的jar包，这个过程太慢
                println '===plugin=replugin-plugin-gradle==='
                project.plugins.apply('replugin-plugin-gradle')
            }
        }
    }
}


apply plugin: AutoSetReplugin

dependencies {
    implementation rootProject.supportAppcompat
    //插件编译时依赖repluginPluginLib
    pluginImplementation rootProject.repluginPluginLib

    //作为插件的时候才这样
    pluginCompileOnly files('../build_config/p_libs/fragment-26.1.0.jar')
}

android.applicationVariants.all{
    variant ->
        if(variant.flavorName.startsWith("plugin")) {
            println("flavorName="+variant.flavorName)
            variant.getCompileConfiguration().exclude group: 'com.android.support', module: 'support-fragment'
            //getRuntimeConfiguration 运行时移除，相当于CompileOnly，只在编译时参与。
            // 而support-fragment本质是aar依赖，不能只CompileOnly，需要编译时也移除，所以必须上面这句
            variant.getRuntimeConfiguration().exclude group: 'com.android.support', module: 'support-fragment'
        }
}
